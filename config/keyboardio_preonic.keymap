/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define LOWER 1
#define RAISE 2
#define FN 3

// Hyper key: all the modifiers

#define HYPER LC(LS(LA(LGUI)))

/ {
    chosen {
        // Valid choices: [ &mit_layout, &ortho_layout ]

        zmk,physical-layout = &ortho_layout;
    };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <31 34>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <31 30>;
        };

        bspc {
            bindings = <&kp BSPC>;
            key-positions = <34 35>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <29 30 31>;
        };

        ent {
            bindings = <&kp ENTER>;
            key-positions = <34 35 36>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <9 10 11 21 22 23 33 34 35 12 14 13 45 46 47 49 48 50 62 61 59 57 58 60 24 25 26 38 37 36 0 1 2>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <3 4 5 6 7 8 15 16 17 18 19 20 27 28 29 30 31 32 39 40 41 42 43 44 51 52 53 54 55 56>;
        };

        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
                                                                                                                                 &lt 2 C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
&kp ESC                   &kp N1        &kp N2       &kp N3       &kp N4        &kp N5     &kp N6     &kp N7        &kp N8       &kp N9        &kp N0             &kp BSPC
&kp TAB                   &kp Q         &kp W        &kp E        &kp R         &kp T      &kp Y      &kp U         &kp I        &kp O         &kp P              &kp LBKT
&caps_word                &hml LCTRL A  &hml LALT S  &hml LGUI D  &hml LSHFT F  &kp G      &kp H      &hmr RSHFT J  &hmr RGUI K  &hmr LALT L   &hmr RCTRL SEMI    &kp SQT
&kp LSHFT                 &kp Z         &kp X        &kp C        &kp V         &kp B      &kp N      &kp M         &kp COMMA    &kp PERIOD    &kp UP             &kp ENTER
&kp LA(LC(LS(LEFT_GUI)))  &kp LCTRL     &kp LALT     &kp LGUI     &mo 1         &kp SPACE  &kp SPACE  &mo 1         &kp FSLH     &kp LEFT      &kp DOWN           &kp RIGHT
            >;
        };

        layer_2 {
            bindings = <
                                                                        &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        func_layer {
            label = "Function";
            bindings = <
                                                                                                           &trans  &trans  &trans
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
&bootloader  &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
